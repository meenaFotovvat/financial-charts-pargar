# 📈 Next.js Candlestick Chart App

This project is a modern frontend application built with **Next.js**, **TypeScript**, **Tailwind CSS**, and the powerful [`lightweight-charts`](https://github.com/tradingview/lightweight-charts) library to render interactive and responsive candlestick charts.

---

## 🚀 Features

- ⚡️ Fast & optimized with Next.js App Router
- 📊 Interactive candlestick charts using `lightweight-charts`
- 💅 Utility-first styling with Tailwind CSS
- ✅ Type-safe with TypeScript
- 📱 Fully responsive design
- 🧩 Modular project structure

---

## 🏗️ Project Structure

src/
├── app/ # App router pages
├── components/ # Reusable UI components
├── data/ # Static or mock data
├── types/ # TypeScript types and interfaces


---

## 🧰 Tech Stack

- [Next.js](https://nextjs.org/)
- [TypeScript](https://www.typescriptlang.org/)
- [Tailwind CSS](https://tailwindcss.com/)
- [Lightweight Charts](https://www.npmjs.com/package/lightweight-charts)

---


## Explaination:

This project includes two main components for displaying charts using different libraries. Below are the details of each section and the reasoning behind the chosen approaches:

1. **BarComparisonChart Component (using Recharts)**:
   - `"use client"`: This file utilizes browser APIs (window) and must be executed on the client-side.
   - **ResponsiveContainer**: Ensures the chart is responsive and automatically adjusts its size.
   - **CartesianGrid, XAxis, YAxis, Tooltip**: Customization of axes and chart tooltips.
   - **Custom Legend**: Adjusted for Tailwind styling and provides more control over positioning.

2. **CandlestickChart Component (using lightweight-charts)**:
   - **lightweight-charts library**: Suitable for financial charts (candlestick) with high performance.
   - **useRef + useEffect**: Enables access and management of the chart after rendering.
   - **isMounted**: Ensures the DOM element exists before initializing the Observer and mapping.
   - **ResizeObserver**: Dynamically adjusts chart size when the window size changes.

3. **Candlestick Page**:
   - **dynamic with `{ ssr: false }`**: Since lightweight-charts depends on the window object, it causes issues on the server (SSR). By disabling SSR, this component is only loaded on the client-side.
   - **Separation of data from the component**: Data is loaded from a JSON file in the `data/` folder to maintain clean and testable code.

This approach ensures both charts function optimally within their respective use cases while keeping the implementation structured and efficient. Let me know if you need further refinements!